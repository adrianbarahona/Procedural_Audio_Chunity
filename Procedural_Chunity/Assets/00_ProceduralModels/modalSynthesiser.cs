using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class modalSynthesiser : MonoBehaviour
{
    /*
    Modal Synthesiser.
    It uses 100 modes (filters) and a white noise instance.
    The residue is triggered from disk.
    Partially based on the modal synthesiser found in https://www.kadenze.com/courses/physics-based-sound-synthesis-for-games-and-interactive-systems-iv

    Materials: Metal 1, Metal 2 and Glass.
    */

    public float impactPitch = 1.0f;
    public string impactMaterial = "metal_1"; // "metal_1", "metal_2", "glass" 
    public string impactModality = "hit"; // "hit, "slide"
    public int impactAttack = 200;

    void Start()
    {
        GetComponent<ChuckSubInstance>().RunCode(@"
        20 => int NUM_MODES;
        // Create X number of filters filters (max 100)
        ResonZ modes[NUM_MODES];

        // METAL 1
        //Frequencies and amplitudes
        [[ 1636.523438 , 1.000000 ], [ 1679.589844 , 0.078544 ], [ 2613.592529 , 0.144034 ], [ 6023.913574 , 0.042668 ], [ 4298.565674 , 0.107588 ], [ 449.505615 , 0.078308 ], [ 4586.572266 , 0.047433 ], [ 1590.765381 , 0.003695 ], [ 6075.054932 , 0.052280 ], [ 5593.249512 , 0.060108 ], [ 7463.946533 , 0.009043 ], [ 7132.873535 , 0.073517 ], [ 1722.656250 , 0.000929 ], [ 2906.982422 , 0.065001 ], [ 3695.635986 , 0.004086 ], [ 6255.395508 , 0.002959 ], [ 1765.722656 , 0.001449 ], [ 9959.106445 , 0.001379 ], [ 7507.012939 , 0.002746 ], [ 6155.804443 , 0.007063 ], [ 7765.411377 , 0.000508 ], [ 1889.538574 , 0.046885 ], [ 4341.632080 , 0.034494 ], [ 4629.638672 , 0.002328 ], [ 4449.298096 , 0.038232 ], [ 1808.789063 , 0.002068 ], [ 802.111816 , 0.037448 ], [ 6209.637451 , 0.001215 ], [ 3738.702393 , 0.005113 ], [ 8691.339111 , 0.018206 ], [ 8634.814453 , 0.009490 ], [ 1545.007324 , 0.005290 ], [8319.891357 , 0.007769 ], [ 5835.498047 , 0.005798 ], [ 4252.807617 , 0.003927 ], [ 13194.470215 , 0.006064 ], [ 7808.477783 , 0.001668 ], [ 6917.541504 , 0.018198 ], [ 10002.172852 , 0.002616 ], [ 11557.946777 , 0.003088 ], [ 8362.957764 , 0.008293 ], [ 11412.597656 , 0.000481 ], [ 6298.461914 , 0.001234 ], [ 5978.155518 , 0.000292 ], [ 3604.119873 , 0.008934 ], [ 4540.814209 , 0.001517 ], [ 3781.768799 , 0.001726 ], [ 7719.653320 , 0.000552 ], [ 4161.291504 , 0.011867 ], [ 10667.010498 , 0.004279 ], [ 5071.069336 , 0.012975 ], [ 4207.049561 , 0.001260 ], [ 13469.018555 , 0.000054 ], [ 14214.605713 , 0.000246 ], [ 8118.017578 , 0.008416 ], [ 4734.613037 , 0.010330 ], [ 9291.577148 , 0.000876 ], [ 7967.285156 , 0.004000 ], [ 2567.834473 , 0.000812 ], [ 2656.658936 , 0.000521 ], [ 10276.721191 , 0.000943 ], [ 7550.079346 , 0.000157 ], [ 4672.705078 , 0.000491 ], [ 3846.368408 , 0.000401 ], [ 3649.877930 , 0.004682 ], [ 3910.968018 , 0.000315 ], [ 7175.939941 , 0.000489 ], [ 9913.348389 , 0.000294 ], [ 7418.188477 , 0.006479 ], [ 4807.287598 , 0.008974 ], [ 4115.533447 , 0.000524 ], [ 3980.950928 , 0.000797 ], [ 8263.366699 , 0.000696 ], [ 6521.868896 , 0.003172 ], [ 6869.091797 , 0.017463 ], [ 8871.679688 , 0.002292 ], [ 9060.095215 , 0.001635 ], [ 6341.528320 , 0.001422 ], [ 11601.013184 , 0.000619 ], [ 11366.839600 , 0.001579 ], [ 7851.544189 , 0.000829 ], [ 7638.903809 , 0.005681 ], [ 7087.115479 , 0.003108 ], [ 9687.249756 , 0.000279 ], [ 14168.847656 , 0.000317 ], [ 9864.898682 , 0.002407 ], [ 12209.326172 , 0.001030 ], [ 11455.664063 , 0.000098 ], [ 9356.176758 , 0.000942 ], [ 10365.545654 , 0.002261 ], [ 8010.351563 , 0.003380 ], [ 13067.962646 , 0.000114 ], [ 13512.084961 , 0.000068 ], [ 12621.148682 , 0.000198 ], [ 13423.260498 , 0.000393 ], [ 13732.800293 , 0.000317 ], 
        [ 13237.536621 , 0.000186 ], [ 14257.672119 , 0.000501 ], [ 16424.450684 , 0.000055 ], [ 17476.885986 , 0.000108 ]]
         @=> float metal_1_Modes[][];

         //METAL 2
         [[ 2828.924561 , 1.000000 ], [ 2917.749023 , 0.410699 ], [ 2960.815430 , 0.276629 ], [ 2871.990967 , 0.497120 ], [ 2783.166504 , 0.934936 ], [ 3003.881836 , 0.127875 ], [ 2737.408447 , 0.365314 ], [ 3046.948242 , 0.249598 ], [ 3090.014648 , 0.115260 ], [ 11412.597656 , 0.081564 ], [ 2675.500488 , 0.284181 ], [ 3133.081055 , 0.042247 ], [ 3176.147461 , 0.028888 ], [ 3264.971924 , 0.173571 ], [ 3316.113281 , 0.065009 ], [ 11455.664063 , 0.060568 ], [ 11366.839600 , 0.064341 ], [ 2629.742432 , 0.152967 ], [ 3219.213867 , 0.086386 ], [ 4252.807617 , 0.204607 ], [ 3386.096191 , 0.048698 ], [ 1558.465576 , 0.709561 ], [ 1760.339355 , 0.218179 ], [ 3437.237549 , 0.055788 ], [ 1830.322266 , 0.042902 ], [ 621.771240 , 0.484925 ], [ 1703.814697 , 0.146068 ], [ 2546.301270 , 0.182584 ], [ 3480.303955 , 0.126107 ], [ 1905.688477 , 0.058330 ], [ 2384.802246 , 0.043682 ], [ 4295.874023 , 0.056212 ], [ 1948.754883 , 0.046741 ], [ 2325.585938 , 0.030168 ], [ 3531.445313 , 0.012451 ], [ 2196.386719 , 0.054432 ], [ 2266.369629 , 0.064403 ], [ 2492.468262 , 0.143233 ], [ 2137.170410 , 0.065319 ], [ 1203.167725 , 0.089028 ], [ 2438.635254 , 0.160490 ], [ 1999.896240 , 0.124990 ], [ 2051.037598 , 0.091536 ], [ 1326.983643 , 0.146106 ], [ 1388.891602 , 0.149458 ], [ 1141.259766 , 0.108804 ], [ 3601.428223 , 0.052403 ], [ 1466.949463 , 0.229736 ], [ 11498.730469 , 0.059671 ], [ 1658.056641 , 0.113470 ], [ 11321.081543 , 0.014248 ], [ 1267.767334 , 0.022137 ], [ 3666.027832 , 0.032752 ], [ 1095.501709 , 0.185558 ], [ 1049.743652 , 0.086564 ], [ 3709.094238 , 0.092648 ], [ 1003.985596 , 0.126436 ], [ 3752.160645 , 0.076526 ], [ 4207.049561 , 0.406940 ], [ 4338.940430 , 0.065479 ], [ 1512.707520 , 0.279201 ], [ 901.702881 , 0.093413 ], [ 11541.796875 , 0.072312 ], [ 3795.227051 , 0.072729 ], [ 3838.293457 , 0.065947 ], [ 1601.531982 , 0.322796 ], [ 3881.359863 , 0.051919 ], [ 11584.863281 , 0.020599 ], [ 3924.426270 , 0.045634 ], [ 11275.323486 , 0.029131 ], [ 4155.908203 , 0.232402 ], [ 9692.633057 , 0.056885 ], [ 3967.492676 , 0.091209 ], [ 4382.006836 , 0.078335 ], [ 11627.929688 , 0.013093 ], [ 4099.383545 , 0.029155 ], [ 11229.565430 , 0.021254 ], [ 11670.996094 , 0.010170 ], [ 4010.559082 , 0.067947 ], [ 11714.062500 , 0.020194 ], [ 11183.807373 , 0.006331 ], [ 7730.419922 , 0.049333 ], [ 8214.916992 , 0.019083 ], [ 8169.158936 , 0.010606 ], [ 8257.983398 , 0.009113 ], [ 7684.661865 , 0.032470 ], [ 11765.203857 , 0.021764 ], [ 7326.672363 , 0.039617 ], [ 7773.486328 , 0.027980 ], [ 6255.395508 , 0.165956 ], [ 11138.049316 , 0.006980 ], [ 11808.270264 , 0.012586 ], [ 8309.124756 , 0.006700 ], [ 7280.914307 , 0.086866 ], [ 7369.738770 , 0.008765 ], [ 7816.552734 , 0.018503 ], [ 11851.336670 , 0.006376 ], [ 11092.291260 , 0.005240 ], [ 17861.791992 , 0.007268 ], [ 17816.033936 , 0.005227 ]]
         @=> float metal_2_Modes[][];

         // GLASS
         [[ 2398.260498 , 1.000000 ], [ 6608.001709 , 0.078753 ], [ 4457.373047 , 0.327401 ], [ 958.227539 , 0.713165 ], [ 9953.723145 , 0.011336 ], [ 6651.068115 , 0.026831 ], [ 13172.937012 , 0.008863 ], [ 6562.243652 , 0.008969 ], [ 6979.449463 , 0.030778 ], [ 9749.157715 , 0.018208 ], [ 4411.614990 , 0.040831 ], [ 4500.439453 , 0.021134 ], [ 6694.134521 , 0.011277 ], [ 2441.326904 , 0.019508 ], [ 9996.789551 , 0.001978 ], [ 2352.502441 , 0.006972 ], [ 7022.515869 , 0.048283 ], [ 11816.345215 , 0.003871 ], [ 13127.178955 , 0.001684 ], [ 9689.941406 , 0.005985 ], [ 12591.540527 , 0.002230 ], [ 9907.965088 , 0.005199 ], [ 2597.442627 , 0.024262 ], [ 13216.003418 , 0.000827 ], 
        [ 6737.200928 , 0.008012 ], [ 6516.485596 , 0.004188 ], [ 8739.788818 , 0.005125 ], [ 6780.267334 , 0.001387 ], [ 10039.855957 , 0.003368 ], [ 6823.333740 , 0.005706 ], [ 4543.505859 , 0.027770 ], [ 4328.173828 , 0.009268 ], [ 2484.393311 , 0.003883 ], [ 7065.582275 , 0.016459 ], [ 6933.691406 , 0.001208 ], [ 4656.555176 , 0.004860 ], [ 4217.816162 , 0.002732 ], [ 6470.727539 , 0.003198 ], [ 11504.113770 , 0.005453 ], [ 2306.744385 , 0.002825 ], [ 9862.207031 , 0.001526 ], [ 2527.459717 , 0.006176 ], [ 4947.253418 , 0.003774 ], [ 12314.300537 , 0.004735 ], [ 4610.797119 , 0.006339 ], [ 13259.069824 , 0.001741 ], [ 10082.922363 , 0.002920 ], [ 7127.490234 , 0.005244 ], [ 16717.840576 , 0.001370 ], [ 13081.420898 , 0.001357 ], [ 4260.882568 , 0.008356 ], [ 4099.383545 , 0.005961 ], [ 9644.183350 , 0.001783 ], [ 12634.606934 , 0.000693 ], [ 3445.312500 , 0.001153 ], [ 4018.634033 , 0.001296 ], [ 4699.621582 , 0.009469 ], [ 11770.587158 , 0.001554 ], [ 3509.912109 , 0.000900 ], [ 3972.875977 , 0.000853 ], [ 3910.968018 , 0.003683 ], [ 6887.933350 , 0.007756 ], [ 4172.058105 , 0.007023 ], [ 12238.934326 , 0.002768 ], [ 10177.130127 , 0.001758 ], [ 3690.252686 , 0.001271 ], [ 11458.355713 , 0.001889 ], [ 4742.687988 , 0.005697 ], [ 3816.760254 , 0.000921 ], [ 8922.821045 , 0.037627 ], [ 10125.988770 , 0.001004 ], [ 8694.030762 , 0.008363 ], [ 12545.782471 , 0.000893 ], [ 8634.814453 , 0.007253 ], [ 7184.014893 , 0.009689 ], [ 13302.136230 , 0.000145 ], [ 15380.090332 , 0.001695 ], [ 14004.656982 , 0.001548 ], [ 13030.279541 , 0.000509 ], [ 10220.196533 , 0.000951 ], [ 7235.156250 , 0.003586 ], [ 11724.829102 , 0.001035 ], [ 9792.224121 , 0.000893 ], [ 8782.855225 , 0.002379 ], [ 7520.471191 , 0.001739 ], [ 16760.906982 , 0.000322 ], [ 14381.488037 , 0.002457 ], [ 11859.411621 , 0.001662 ], [ 11547.180176 , 0.001004 ], [ 14658.728027 , 0.000761 ], [ 10276.721191 , 0.000221 ], [ 19557.531738 , 0.000240 ], [ 13345.202637 , 0.000873 ], [ 12677.673340 , 0.000611 ], [ 12720.739746 , 0.000373 ], [ 12193.176270 , 0.001564 ], [ 16672.082520 , 0.000218 ], [ 11412.597656 , 0.001555 ], [ 16128.369141 , 0.001686 ], [ 17385.369873 , 0.001553 ]]
         @=> float glassModes[][];
 

        //Noise, envelope and residue. 
        SndBuf residue => Gain direct => dac;
        //Point to the current directory.
        me.dir() => string path;
        //set the signal chain (noise through the envelope)
        Noise n => ADSR hit;

        // pitch randomization
        float randomPitchModes;

        // set default values and signal chain for the filters
        for (int i; i < NUM_MODES; i++)  {
            hit => modes[i] => dac;
            //random frequency (between mode - mode/500 and mode + mode/500)
            (Math.random2f(metal_1_Modes[i][0] - (metal_1_Modes[i][0] / 500), metal_1_Modes[i][0] + (metal_1_Modes[i][0] / 500))) => modes[i].freq;
            //random gain (between gain - gain/200 and gain + gain/200)
            Math.random2f(metal_1_Modes[i][1] - (metal_1_Modes[i][1])/200, metal_1_Modes[i][1] + (metal_1_Modes[i][1])/200) => modes[i].gain;
            Math.random2f(1200,1500) => modes[i].Q;
        }

        fun void setImpactMode(string impactMode, int attack)
        {
            if (impactMode == ""hit"")
            {
                    0 => attack;
                    (attack::ms, 10::ms, 0.0, 1000::ms) => hit.set;
                    Math.random2f(30, 50) => hit.gain;
                    Math.random2f(0.3, 0.5) => direct.gain;
                }

                if (impactMode == ""slide"")
                {
                    (attack::ms, 100::ms, 0.0, 3000::ms) => hit.set;
                    Math.random2f(10, 20) => hit.gain;
                    0.0 => direct.gain;
                }
            }

        // set material values
        fun void setMaterial(float ModeMasterPitch, string material)
        {

            //Random frequency, gain and Q for each hit.
            Math.random2f(0.99, 1.01) => randomPitchModes;

            if (material == ""metal_1"")
            {
                //Load the residue.
                path + ""metalResidue.wav"" => residue.read;
                for (int i; i < NUM_MODES; i++)
                {
                    //random frequency (between mode - mode/500 and mode + mode/500)
                    ModeMasterPitch * randomPitchModes * (Math.random2f(metal_1_Modes[i][0] - (metal_1_Modes[i][0] / 500), metal_1_Modes[i][0] + (metal_1_Modes[i][0] / 500))) => modes[i].freq;
                    //random gain (between gain - gain/200 and gain + gain/200)
                    Math.random2f(metal_1_Modes[i][1] - (metal_1_Modes[i][1]) / 200, metal_1_Modes[i][1] + (metal_1_Modes[i][1]) / 200) => modes[i].gain;
                    Math.random2f(1200, 1500) => modes[i].Q;
                }
            }

            if (material == ""metal_2"")
            {
                //Load the residue.
                path + ""metalResidue.wav"" => residue.read;
                for (int i; i < NUM_MODES; i++)
                {
                    //random frequency (between mode - mode/500 and mode + mode/500)
                    ModeMasterPitch * randomPitchModes * (Math.random2f(metal_2_Modes[i][0] - (metal_2_Modes[i][0] / 500), metal_2_Modes[i][0] + (metal_2_Modes[i][0] / 500))) => modes[i].freq;
                    //random gain (between gain - gain/200 and gain + gain/200)
                    Math.random2f(metal_2_Modes[i][1] - (metal_2_Modes[i][1]) / 200, metal_2_Modes[i][1] + (metal_2_Modes[i][1]) / 200) => modes[i].gain;
                    Math.random2f(1200, 1300) => modes[i].Q;
                }
            }

            if (material == ""glass"")
            {
                //Load the residue.
                path + ""glassResidue.wav"" => residue.read;
                for (int i; i < NUM_MODES; i++)
                {
                    //random frequency (between mode - mode/500 and mode + mode/500)
                    ModeMasterPitch * randomPitchModes * (Math.random2f(glassModes[i][0] - (glassModes[i][0] / 500), glassModes[i][0] + (glassModes[i][0] / 500))) => modes[i].freq;
                    //random gain (between gain - gain/200 and gain + gain/200)
                    Math.random2f(glassModes[i][1] - (glassModes[i][1]) / 200, glassModes[i][1] + (glassModes[i][1]) / 200) => modes[i].gain;
                    Math.random2f(1200, 1500) => modes[i].Q;
                }
            }

        }

        fun void impact(float ModeMasterPitch, string material, string impactMode, int attack)
        {

            // set the material parameters
            setMaterial(ModeMasterPitch, material);
            //Residue rate (pitch) randomized
            ModeMasterPitch* Math.random2f(0.99, 1.01) => residue.rate;

            //set the impact mode
            setImpactMode(impactMode, attack);

            //Hit the model (trigger the ADSR envelope).
            1 => hit.keyOn;
            //set the residue playhead to the start.
            0 => residue.pos;
        }

        global float impactPitch;
        global string impactMaterial;
        global string impactModality;
        global int impactAttack;
        global Event impactHappened;
        
	    while( true )
	    {
		    impactHappened => now;
		    spork ~ impact(impactPitch, impactMaterial, impactModality, impactAttack);
	    }
        
		");
    }


    void OnMouseDown()
    {
        GetComponent<ChuckSubInstance>().SetFloat("impactPitch", impactPitch);
        GetComponent<ChuckSubInstance>().SetString("impactMaterial", impactMaterial);
        GetComponent<ChuckSubInstance>().SetString("impactModality", impactModality);
        GetComponent<ChuckSubInstance>().SetInt("impactAttack", impactAttack);
        GetComponent<ChuckSubInstance>().BroadcastEvent("impactHappened");
    }


}


